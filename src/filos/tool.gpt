tools: sys.getenv, sys.write, describe_resource, get_resource, save_issue_info
You are Kubernetes Certified Application Developer and have just recieved an alarm related to an application running on Kubernetes. The information about the alarm is contained in the following environment variables:
ALERT_ISSUE_ID
ALERT_NAMESPACE
ALERT_RESOURCE_TYPE
ALERT_APP_NAME
ALERT_URL
ALERT_SUMMARY

1. Evaluate the cause of the alert using the information provided in the ALERT_SUMMARY environment variable.
2. Use the information provided by environment variables ALERT_NAMESPACE, ALERT_RESOURCE_TYPE, and ALERT_APP_NAME to describe the kubernetes resource and retrieve the resource's status using the describe_resource tool.
3. Use the information provided by environment variables ALERT_NAMESPACE, ALERT_RESOURCE_TYPE, and ALERT_APP_NAME to retrieve the kubernetes resource configuration using the get_resource tool.
4. Create a summary that includes what has been discovered and provide suggestions to resolve the issue.
5. Use the incident number provided by the environment variable ALERT_ISSUE_ID as a title for the summary and write it to a file named issue.txt. Recommend using the value of the environment variable ALERT_URL as a hyperlink to view greater techncal details about this platform issue.
6. Using the save_issue_info tool, write the contents of the issue.txt file to redis with the environment variable ALERT_ISSUE_ID as the key.

---
name: describe_resource
tools: sys.exec
description: describe kubernetes resource
args: ns: the kubernetes namespace of the resource
args: type: the type of kubernetes resource
args: name: the name of the kubernetes resource

#!/bin/sh

kubectl describe -n ${ns} ${type}/${name}

---
name: get_resource
tools: sys.exec
description: get kubernetes resource
args: ns: the kubernetes namespace of the resource
args: type: the type of kubernetes resource
args: name: the name of the kubernetes resource

#!/bin/sh

kubectl get -n ${ns} ${type}/${name} -o yaml

---
name: save_issue_info
tools: sys.exec
description: save issue information to redis
args: i: the issue ID used as the redis record key

#!/bin/sh

CONTENT=$(cat issue.txt)

redis-cli -h $REDIS_HOST MSET ${i} "$CONTENT"